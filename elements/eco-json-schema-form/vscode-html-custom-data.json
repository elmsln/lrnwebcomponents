{
  "version": 1,
  "tags": [
    {
      "name": "eco-json-schema-array",
      "description": "`eco-json-schema-array` takes in a JSON schema of type array and builds a form,\nexposing a `value` property that represents an array described by the schema.\n\nPlease see the `eco-json-schema-object` documentation for further information.\n\nEvents:\n\n  * `build-fieldset` {`CustomEvent<{ container: any; path: string; prefix: string; properties: any; type: string; value: any; }>`} - \n\nAttributes:\n\n  * `global-options` - \n\n  * `property-name` {`string`} - \n\n  * `schema` - \n\n  * `__headings` {`any[]`} - \n\nProperties:\n\n  * `globalOptions` - \n\n  * `propertyName` {`string`} - \n\n  * `schema` - \n\n  * `__headings` {`any[]`} - \n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "global-options",
          "description": "`global-options` - \n\nProperty: globalOptions\n\nDefault: [object Object]"
        },
        {
          "name": "property-name",
          "description": "`property-name` {`string`} - \n\nProperty: propertyName\n\nDefault: null"
        },
        {
          "name": "schema",
          "description": "`schema` - \n\nProperty: schema\n\nDefault: [object Object]"
        },
        {
          "name": "__headings",
          "description": "`__headings` {`any[]`} - \n\nProperty: __headings\n\nDefault: "
        },
        {
          "name": "onbuild-fieldset",
          "description": "`build-fieldset` {`CustomEvent<{ container: any; path: string; prefix: string; properties: any; type: string; value: any; }>`} - "
        }
      ]
    },
    {
      "name": "eco-json-schema-boolean",
      "description": "Attributes:\n\n  * `schema` - \n\n  * `value` {`boolean`} - \n\n  * `error` {`boolean`} - \n\n  * `_label` {`string`} - \n\nProperties:\n\n  * `schema` - \n\n  * `value` {`boolean`} - \n\n  * `error` {`boolean`} - \n\n  * `_label` {`string`} - \n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "schema",
          "description": "`schema` - \n\nProperty: schema"
        },
        {
          "name": "value",
          "description": "`value` {`boolean`} - \n\nProperty: value\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "error",
          "description": "`error` {`boolean`} - \n\nProperty: error\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "_label",
          "description": "`_label` {`string`} - \n\nProperty: _label\n\nDefault: "
        }
      ]
    },
    {
      "name": "eco-json-schema-enum",
      "description": "Attributes:\n\n  * `schema` - \n\n  * `value` {`string`} - \n\n  * `error` {`string`} - \n\n  * `_items` - \n\nProperties:\n\n  * `schema` - \n\n  * `value` {`string`} - \n\n  * `error` {`string`} - \n\n  * `_items` - \n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "schema",
          "description": "`schema` - \n\nProperty: schema"
        },
        {
          "name": "value",
          "description": "`value` {`string`} - \n\nProperty: value\n\nDefault: null"
        },
        {
          "name": "error",
          "description": "`error` {`string`} - \n\nProperty: error\n\nDefault: null"
        },
        {
          "name": "_items",
          "description": "`_items` - \n\nProperty: _items"
        }
      ]
    },
    {
      "name": "eco-json-schema-fieldset",
      "description": "`eco-json-schema-fieldset` takes in a JSON schema of type fieldset and builds a form,\nexposing a `value` property that represents an array described by the schema.\n\nPlease see the `eco-json-schema-object` documentation for further information.\n\nEvents:\n\n  * `build-fieldset` {`CustomEvent<{ container: any; path: string; prefix: string; properties: any; type: string; value: any; }>`} - \n\nAttributes:\n\n  * `property-name` {`string`} - \n\n  * `schema` - \n\nProperties:\n\n  * `propertyName` {`string`} - \n\n  * `schema` - \n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "property-name",
          "description": "`property-name` {`string`} - \n\nProperty: propertyName\n\nDefault: null"
        },
        {
          "name": "schema",
          "description": "`schema` - \n\nProperty: schema\n\nDefault: [object Object]"
        },
        {
          "name": "onbuild-fieldset",
          "description": "`build-fieldset` {`CustomEvent<{ container: any; path: string; prefix: string; properties: any; type: string; value: any; }>`} - "
        }
      ]
    },
    {
      "name": "eco-json-schema-file",
      "description": "`eco-json-schema-file` takes in a JSON schema of type number and string and\ncontains a `paper-input`, exposing a `value` property that represents the schema.\n\nValidation is handled for strings and number/integers by mapping JSON schema\nvalidation keywords to `paper-input` attributes; form elements will automatically\ntry and validate themselves as users provide input:\n\nPlease see the `eco-json-schema-object` documentation for further information.\n\nEvents:\n\n  * `before-upload` {`CustomEvent<boolean>`} - \n\nAttributes:\n\n  * `language` - \n\n  * `resources` - \n\n  * `schema` - \n\n  * `value` - \n\n  * `target` {`string`} - `target`\n\n  * `accept` {`string`} - `accept`\n\n  * `droppable` {`boolean`} - `droppable`\n\n  * `drop-text` {`string`} - `dropText`\n\n  * `multi` {`boolean`} - `multi`\n\n  * `files` {`any[]`} - `files`\n\n  * `raised` {`boolean`} - `raised`\n\n  * `noink` {`boolean`} - `noink`\n\n  * `headers` - `headers`\n\n  * `retry-text` {`string`} - `retryText`\n\n  * `remove-text` {`string`} - `removeText`\n\n  * `success-text` {`string`} - `successText`\n\n  * `error-text` {`string`} - `errorText`\n\n  * `_shown-drop-text` {`boolean`} - `_shownDropText`\n\n  * `additional` - `additional`\n\n  * `file-data-name` {`string`} - `fileDataName`\n\n  * `paper-button-alt` {`string`} - `paperButtonAlt`\n\n  * `paper-button-title` {`string`} - `paperButtonTitle`\n\nProperties:\n\n  * `language` - \n\n  * `resources` - \n\n  * `schema` - \n\n  * `value` - \n\n  * `target` {`string`} - `target`\n\n  * `accept` {`string`} - `accept`\n\n  * `droppable` {`boolean`} - `droppable`\n\n  * `dropText` {`string`} - `dropText`\n\n  * `multi` {`boolean`} - `multi`\n\n  * `files` {`any[]`} - `files`\n\n  * `raised` {`boolean`} - `raised`\n\n  * `noink` {`boolean`} - `noink`\n\n  * `headers` - `headers`\n\n  * `retryText` {`string`} - `retryText`\n\n  * `removeText` {`string`} - `removeText`\n\n  * `successText` {`string`} - `successText`\n\n  * `errorText` {`string`} - `errorText`\n\n  * `_shownDropText` {`boolean`} - `_shownDropText`\n\n  * `additional` - `additional`\n\n  * `fileDataName` {`string`} - `fileDataName`\n\n  * `paperButtonAlt` {`string`} - `paperButtonAlt`\n\n  * `paperButtonTitle` {`string`} - `paperButtonTitle`\n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "language",
          "description": "`language` - \n\nProperty: language\n\nDefault: en"
        },
        {
          "name": "resources",
          "description": "`resources` - \n\nProperty: resources"
        },
        {
          "name": "schema",
          "description": "`schema` - \n\nProperty: schema"
        },
        {
          "name": "value",
          "description": "`value` - \n\nProperty: value"
        },
        {
          "name": "target",
          "description": "`target` {`string`} - `target`\n\nProperty: target\n\nDefault: "
        },
        {
          "name": "accept",
          "description": "`accept` {`string`} - `accept`\n\nProperty: accept\n\nDefault: "
        },
        {
          "name": "droppable",
          "description": "`droppable` {`boolean`} - `droppable`\n\nProperty: droppable\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "drop-text",
          "description": "`drop-text` {`string`} - `dropText`\n\nProperty: dropText\n\nDefault: Drop Files Here"
        },
        {
          "name": "multi",
          "description": "`multi` {`boolean`} - `multi`\n\nProperty: multi\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "files",
          "description": "`files` {`any[]`} - `files`\n\nProperty: files"
        },
        {
          "name": "raised",
          "description": "`raised` {`boolean`} - `raised`\n\nProperty: raised\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "noink",
          "description": "`noink` {`boolean`} - `noink`\n\nProperty: noink\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "headers",
          "description": "`headers` - `headers`\n\nProperty: headers\n\nDefault: [object Object]"
        },
        {
          "name": "retry-text",
          "description": "`retry-text` {`string`} - `retryText`\n\nProperty: retryText\n\nDefault: Retry Upload"
        },
        {
          "name": "remove-text",
          "description": "`remove-text` {`string`} - `removeText`\n\nProperty: removeText\n\nDefault: Remove"
        },
        {
          "name": "success-text",
          "description": "`success-text` {`string`} - `successText`\n\nProperty: successText\n\nDefault: Success"
        },
        {
          "name": "error-text",
          "description": "`error-text` {`string`} - `errorText`\n\nProperty: errorText\n\nDefault: Error uploading file..."
        },
        {
          "name": "_shown-drop-text",
          "description": "`_shown-drop-text` {`boolean`} - `_shownDropText`\n\nProperty: _shownDropText\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "additional",
          "description": "`additional` - `additional`\n\nProperty: additional\n\nDefault: [object Object]"
        },
        {
          "name": "file-data-name",
          "description": "`file-data-name` {`string`} - `fileDataName`\n\nProperty: fileDataName\n\nDefault: file"
        },
        {
          "name": "paper-button-alt",
          "description": "`paper-button-alt` {`string`} - `paperButtonAlt`\n\nProperty: paperButtonAlt\n\nDefault: "
        },
        {
          "name": "paper-button-title",
          "description": "`paper-button-title` {`string`} - `paperButtonTitle`\n\nProperty: paperButtonTitle\n\nDefault: "
        },
        {
          "name": "onbefore-upload",
          "description": "`before-upload` {`CustomEvent<boolean>`} - "
        }
      ]
    },
    {
      "name": "eco-json-schema-input",
      "description": "`eco-json-schema-input` takes in a JSON schema of type number and string and\ncontains a `paper-input`, exposing a `value` property that represents the schema.\n\nValidation is handled for strings and number/integers by mapping JSON schema\nvalidation keywords to `paper-input` attributes; form elements will automatically\ntry and validate themselves as users provide input:\n\nPlease see the `eco-json-schema-object` documentation for further information.\n\nAttributes:\n\n  * `language` - \n\n  * `resources` - \n\n  * `schema` - \n\n  * `value` {`string`} - \n\n  * `error` {`string`} - \n\nProperties:\n\n  * `language` - \n\n  * `resources` - \n\n  * `schema` - \n\n  * `value` {`string`} - \n\n  * `error` {`string`} - \n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "language",
          "description": "`language` - \n\nProperty: language\n\nDefault: en"
        },
        {
          "name": "resources",
          "description": "`resources` - \n\nProperty: resources"
        },
        {
          "name": "schema",
          "description": "`schema` - \n\nProperty: schema"
        },
        {
          "name": "value",
          "description": "`value` {`string`} - \n\nProperty: value"
        },
        {
          "name": "error",
          "description": "`error` {`string`} - \n\nProperty: error\n\nDefault: null"
        }
      ]
    },
    {
      "name": "eco-json-schema-tabs",
      "description": "`eco-json-schema-tabs` takes in a JSON schema of type array and builds a form,\nexposing a `value` property that represents an array described by the schema.\n\nPlease see the `eco-json-schema-object` documentation for further information.\n\nAttributes:\n\n  * `value` {`string`} - \n\nProperties:\n\n  * `value` {`string`} - \n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "value",
          "description": "`value` {`string`} - \n\nProperty: value\n\nDefault: "
        }
      ]
    },
    {
      "name": "eco-json-schema-markup",
      "description": "`eco-json-schema-tabs` takes in a JSON schema of type array and builds a form,\nexposing a `value` property that represents an array described by the schema.\n\nPlease see the `eco-json-schema-object` documentation for further information.\n\nAttributes:\n\n  * `value` {`string`} - \n\nProperties:\n\n  * `value` {`string`} - \n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "value",
          "description": "`value` {`string`} - \n\nProperty: value\n\nDefault: "
        }
      ]
    },
    {
      "name": "eco-json-schema-object",
      "description": "`eco-json-schema-object` takes in a JSON schema of type object and builds a form,\nexposing a `value` property that represents an object described by the schema.\n\nGiven the element:\n\n```\n<eco-json-schema-object schema=\"[[schema]]\" value=\"{{value}}\"></eco-json-schema-object>\n```\n\nAnd a JSON schema:\n\n```\n> this.schema = {\n  \"$schema\": \"http://json-schema.org/schema#\",\n  \"title\": \"Contact\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\nA form will be generated, with the elements `value` looking something like this:\n\n```\n> this.value\n{\n  \"name\": \"Eric\"\n}\n```\n\nDeep / nested schemas are supported for type array and object:\n\n```\n> this.schema = {\n  \"$schema\": \"http://json-schema.org/schema#\",\n  \"title\": \"Contact\",\n  \"type\": \"object\",\n    \"phoneNumbers\": {\n      \"title\": \"Phone numbers\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"title\": \"Type\",\n            \"type\": \"string\"\n          },\n          \"phoneNumber\": {\n            \"title\": \"Phone Number\",\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nValidation is handled for strings and number/integers by mapping JSON schema\nvalidation keywords to `paper-input` attributes; form elements will automatically\ntry and validate themselves as users provide input:\n\n```\n> this.schema = {\n  \"$schema\": \"http://json-schema.org/schema#\",\n  \"title\": \"Contact\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\",\n      \"minLength\": 2\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"minimum\": 0,\n      \"exclusiveMinimum\": true\n    },\n    \"postalCode\": {\n      \"title\": \"Postal/Zip Code\",\n      \"type\": \"string\",\n      \"pattern\": \"[a-zA-Z][0-9][a-zA-Z]\\\\s*[0-9][a-zA-Z][0-9]|[0-9]{5}(-[0-9]{4})?\"\n    },\n    \"email\": {\n      \"title\": \"email\",\n      \"type\": \"string\",\n      \"format\": \"email\"\n    }\n  }\n}\n```\n\nCustomizing components for schema properties is supported by extending your JSON\nschema. For any schema sub-property (`properties` for `\"type\": \"object\"` and\n`items` for `\"type\": \"array\"`) a `component` property may be specified, with\nthe following options:\n\n- `component.name` - specifies the name of the custom component to use\n- `component.valueProperty` - specifies which property of the custom element\n  represents its value\n- `component.properties` - properties that will be set on the element\n\nExample schema using custom components (note that `\"valueProperty\": \"value\"` is\nredundant in this case, `\"valueProperty\": \"value\"` will be the default if not specified):\n\n```\n> this.schema = {\n  \"$schema\": \"http://json-schema.org/schema#\",\n  \"title\": \"Contact\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"phoneNumber\": {\n      \"title\": \"Phone Number\",\n      \"type\": \"string\",\n      \"component\": {\n        \"name\": \"gold-phone-input\",\n        \"valueProperty\": \"value\",\n        \"properties\": {\n          \"countryCode\": \"1\"\n        }\n      }\n    }\n  }\n}\n```\n\nItems set in `component.properties` will override any attributes / properties set\nby `eco-json-schema-form` elements, making it possible to override JSON schema\nvalidation properties mapped to `paper-input` attributes:\n\n```\n> this.schema = {\n  \"$schema\": \"http://json-schema.org/schema#\",\n  \"title\": \"Contact\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"postalCode\": {\n      \"title\": \"Postal/Zip Code\",\n      \"type\": \"string\",\n      \"pattern\": \"[a-zA-Z][0-9][a-zA-Z]\\\\s*[0-9][a-zA-Z][0-9]|[0-9]{5}(-[0-9]{4})?\",\n      \"component\": {\n        \"properties\": {\n          \"autoValidate\": false\n        }\n      }\n    }\n  }\n}\n```\n\nPutting it all together, this schema:\n\n```\n> this.schema = {\n  \"$schema\": \"http://json-schema.org/schema#\",\n  \"title\": \"Contact\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\",\n      \"minLength\": 2\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"minimum\": 0,\n      \"exclusiveMinimum\": true\n    },\n    \"postalCode\": {\n      \"title\": \"Postal/Zip Code\",\n      \"type\": \"string\",\n      \"pattern\": \"[a-zA-Z][0-9][a-zA-Z]\\\\s*[0-9][a-zA-Z][0-9]|[0-9]{5}(-[0-9]{4})?\",\n      \"component\": {\n        \"properties\": {\n          \"autoValidate\": false\n        }\n      }\n    },\n    \"phoneNumbers\": {\n      \"title\": \"Phone numbers\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"title\": \"Type\",\n            \"type\": \"string\"\n          },\n          \"phoneNumber\": {\n            \"title\": \"Phone Number\",\n            \"type\": \"string\",\n            \"component\": {\n              \"name\": \"gold-phone-input\",\n              \"valueProperty\": \"value\",\n              \"properties\": {\n                \"countryCode\": \"1\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"emailAddresses\": {\n      \"title\": \"Emails\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"title\": \"Type\",\n            \"type\": \"string\"\n          },\n          \"email\": {\n            \"title\": \"email\",\n            \"type\": \"string\",\n            \"format\": \"email\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nWill build a form describing an object:\n\n```\n> this.value\n{\n  \"name\": \"Eric\",\n  \"age\": 28,\n  \"postalCode\": \"H1W 2C5\",\n  \"phoneNumbers\": [\n    {\n      \"type\": \"Mobile\",\n      \"phoneNumber\": \"123-456-7890\"\n    }\n  ]\n  \"emailAddresses\": [\n    {\n      \"type\": \"Personal\",\n      \"email\": \"eric@wat.com\"\n    }\n  ]\n}\n```\n\nExternal validation is supported via the `error` property. By providing an\nobject tree with each leaf representing an error message for properties, the\nmessage will be attached to the appropriate element.\n\nExample, for the Contact schema:\n\n```\nel.error = {\n  \"name\": \"String is too short (0 chars) minimum 2\",\n  \"phoneNumbers\": [\n    {\n      \"phoneNumber\": \"String does not match required format\"\n    }\n  ]\n}\n```\n\nEvents:\n\n  * `form-field-changed` {`CustomEvent<EventTarget | null>`} - \n\n  * `value-changed` {`CustomEvent<this>`} - \n\n  * `form-changed` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `language` - \n\n  * `resources` - \n\n  * `schema` - \n\n  * `label` {`string`} - \n\n  * `value` - \n\n  * `error` - \n\n  * `wizard` {`boolean`} - \n\n  * `code-theme` {`string`} - the name of the code-editor theme\n\n  * `autofocus` {`boolean`} - automatically set focus on the first field if that field has autofocus\n\nProperties:\n\n  * `language` - \n\n  * `resources` - \n\n  * `schema` - \n\n  * `label` {`string`} - \n\n  * `value` - \n\n  * `error` - \n\n  * `wizard` {`boolean`} - \n\n  * `codeTheme` {`string`} - the name of the code-editor theme\n\n  * `autofocus` {`boolean`} - automatically set focus on the first field if that field has autofocus\n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "language",
          "description": "`language` - \n\nProperty: language\n\nDefault: en"
        },
        {
          "name": "resources",
          "description": "`resources` - \n\nProperty: resources"
        },
        {
          "name": "schema",
          "description": "`schema` - \n\nProperty: schema"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - \n\nProperty: label"
        },
        {
          "name": "value",
          "description": "`value` - \n\nProperty: value"
        },
        {
          "name": "error",
          "description": "`error` - \n\nProperty: error"
        },
        {
          "name": "wizard",
          "description": "`wizard` {`boolean`} - \n\nProperty: wizard",
          "valueSet": "v"
        },
        {
          "name": "code-theme",
          "description": "`code-theme` {`string`} - the name of the code-editor theme\n\nProperty: codeTheme\n\nDefault: vs-light-2"
        },
        {
          "name": "autofocus",
          "description": "`autofocus` {`boolean`} - automatically set focus on the first field if that field has autofocus\n\nProperty: autofocus\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onform-field-changed",
          "description": "`form-field-changed` {`CustomEvent<EventTarget | null>`} - "
        },
        {
          "name": "onvalue-changed",
          "description": "`value-changed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onform-changed",
          "description": "`form-changed` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "eco-json-schema-tabs",
      "description": "`eco-json-schema-tabs` takes in a JSON schema of type array and builds a form,\nexposing a `value` property that represents an array described by the schema.\n\nPlease see the `eco-json-schema-object` documentation for further information.\n\nEvents:\n\n  * `build-fieldset` {`CustomEvent<{ container: any; path: string; prefix: string; properties: any; type: string; value: any; }>`} - \n\nAttributes:\n\n  * `property-name` {`string`} - \n\n  * `schema` - \n\nProperties:\n\n  * `propertyName` {`string`} - \n\n  * `schema` - \n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "property-name",
          "description": "`property-name` {`string`} - \n\nProperty: propertyName\n\nDefault: null"
        },
        {
          "name": "schema",
          "description": "`schema` - \n\nProperty: schema\n\nDefault: [object Object]"
        },
        {
          "name": "onbuild-fieldset",
          "description": "`build-fieldset` {`CustomEvent<{ container: any; path: string; prefix: string; properties: any; type: string; value: any; }>`} - "
        }
      ]
    },
    {
      "name": "eco-json-schema-wizard",
      "description": "`eco-json-schema-wizard` takes in a JSON schema of type object and builds a form,\nexposing a `value` property that represents an object described by the schema.\n\nGiven the element:\n\n```\n<eco-json-schema-wizard schema=\"[[schema]]\" value=\"{{value}}\"></eco-json-schema-wizard>\n```\n\nAnd a JSON schema:\n\n```\n> this.schema = {\n  \"$schema\": \"http://json-schema.org/schema#\",\n  \"title\": \"Contact\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\nA form will be generated, with the elements `value` looking something like this:\n\n```\n> this.value\n{\n  \"name\": \"Eric\"\n}\n```\n\nDeep / nested schemas are supported for type array and object:\n\n```\n> this.schema = {\n  \"$schema\": \"http://json-schema.org/schema#\",\n  \"title\": \"Contact\",\n  \"type\": \"object\",\n    \"phoneNumbers\": {\n      \"title\": \"Phone numbers\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"title\": \"Type\",\n            \"type\": \"string\"\n          },\n          \"phoneNumber\": {\n            \"title\": \"Phone Number\",\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nValidation is handled for strings and number/integers by mapping JSON schema\nvalidation keywords to `paper-input` attributes; form elements will automatically\ntry and validate themselves as users provide input:\n\n```\n> this.schema = {\n  \"$schema\": \"http://json-schema.org/schema#\",\n  \"title\": \"Contact\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\",\n      \"minLength\": 2\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"minimum\": 0,\n      \"exclusiveMinimum\": true\n    },\n    \"postalCode\": {\n      \"title\": \"Postal/Zip Code\",\n      \"type\": \"string\",\n      \"pattern\": \"[a-zA-Z][0-9][a-zA-Z]\\\\s*[0-9][a-zA-Z][0-9]|[0-9]{5}(-[0-9]{4})?\"\n    },\n    \"email\": {\n      \"title\": \"email\",\n      \"type\": \"string\",\n      \"format\": \"email\"\n    }\n  }\n}\n```\n\nCustomizing components for schema properties is supported by extending your JSON\nschema. For any schema sub-property (`properties` for `\"type\": \"object\"` and\n`items` for `\"type\": \"array\"`) a `component` property may be specified, with\nthe following options:\n\n- `component.name` - specifies the name of the custom component to use\n- `component.valueProperty` - specifies which property of the custom element\n  represents its value\n- `component.properties` - properties that will be set on the element\n\nExample schema using custom components (note that `\"valueProperty\": \"value\"` is\nredundant in this case, `\"valueProperty\": \"value\"` will be the default if not specified):\n\n```\n> this.schema = {\n  \"$schema\": \"http://json-schema.org/schema#\",\n  \"title\": \"Contact\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"phoneNumber\": {\n      \"title\": \"Phone Number\",\n      \"type\": \"string\",\n      \"component\": {\n        \"name\": \"gold-phone-input\",\n        \"valueProperty\": \"value\",\n        \"properties\": {\n          \"countryCode\": \"1\"\n        }\n      }\n    }\n  }\n}\n```\n\nItems set in `component.properties` will override any attributes / properties set\nby `eco-json-schema-form` elements, making it possible to override JSON schema\nvalidation properties mapped to `paper-input` attributes:\n\n```\n> this.schema = {\n  \"$schema\": \"http://json-schema.org/schema#\",\n  \"title\": \"Contact\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"postalCode\": {\n      \"title\": \"Postal/Zip Code\",\n      \"type\": \"string\",\n      \"pattern\": \"[a-zA-Z][0-9][a-zA-Z]\\\\s*[0-9][a-zA-Z][0-9]|[0-9]{5}(-[0-9]{4})?\",\n      \"component\": {\n        \"properties\": {\n          \"autoValidate\": false\n        }\n      }\n    }\n  }\n}\n```\n\nPutting it all together, this schema:\n\n```\n> this.schema = {\n  \"$schema\": \"http://json-schema.org/schema#\",\n  \"title\": \"Contact\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\",\n      \"minLength\": 2\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"minimum\": 0,\n      \"exclusiveMinimum\": true\n    },\n    \"postalCode\": {\n      \"title\": \"Postal/Zip Code\",\n      \"type\": \"string\",\n      \"pattern\": \"[a-zA-Z][0-9][a-zA-Z]\\\\s*[0-9][a-zA-Z][0-9]|[0-9]{5}(-[0-9]{4})?\",\n      \"component\": {\n        \"properties\": {\n          \"autoValidate\": false\n        }\n      }\n    },\n    \"phoneNumbers\": {\n      \"title\": \"Phone numbers\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"title\": \"Type\",\n            \"type\": \"string\"\n          },\n          \"phoneNumber\": {\n            \"title\": \"Phone Number\",\n            \"type\": \"string\",\n            \"component\": {\n              \"name\": \"gold-phone-input\",\n              \"valueProperty\": \"value\",\n              \"properties\": {\n                \"countryCode\": \"1\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"emailAddresses\": {\n      \"title\": \"Emails\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"title\": \"Type\",\n            \"type\": \"string\"\n          },\n          \"email\": {\n            \"title\": \"email\",\n            \"type\": \"string\",\n            \"format\": \"email\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nWill build a form describing an object:\n\n```\n> this.value\n{\n  \"name\": \"Eric\",\n  \"age\": 28,\n  \"postalCode\": \"H1W 2C5\",\n  \"phoneNumbers\": [\n    {\n      \"type\": \"Mobile\",\n      \"phoneNumber\": \"123-456-7890\"\n    }\n  ]\n  \"emailAddresses\": [\n    {\n      \"type\": \"Personal\",\n      \"email\": \"eric@wat.com\"\n    }\n  ]\n}\n```\n\nExternal validation is supported via the `error` property. By providing an\nobject tree with each leaf representing an error message for properties, the\nmessage will be attached to the appropriate element.\n\nExample, for the Contact schema:\n\n```\nel.error = {\n  \"name\": \"String is too short (0 chars) minimum 2\",\n  \"phoneNumbers\": [\n    {\n      \"phoneNumber\": \"String does not match required format\"\n    }\n  ]\n}\n```\n\nEvents:\n\n  * `submit` {`CustomEvent<boolean>`} - \n\nAttributes:\n\n  * `language` {`string`} - \n\n  * `resources` - \n\n  * `schema` - \n\n  * `label` {`string`} - \n\n  * `value` - \n\n  * `page` {`string`} - \n\n  * `pages` {`any[]`} - \n\n  * `error` - \n\n  * `is-review` {`boolean`} - \n\n  * `can-submit` {`boolean`} - \n\n  * `has-next` {`boolean`} - \n\n  * `has-prev` {`boolean`} - \n\n  * `titles` {`any[]`} - \n\n  * `title` {`string`} - \n\nProperties:\n\n  * `language` {`string`} - \n\n  * `resources` - \n\n  * `schema` - \n\n  * `label` {`string`} - \n\n  * `value` - \n\n  * `page` {`string`} - \n\n  * `pages` {`any[]`} - \n\n  * `error` - \n\n  * `isReview` {`boolean`} - \n\n  * `canSubmit` {`boolean`} - \n\n  * `hasNext` {`boolean`} - \n\n  * `hasPrev` {`boolean`} - \n\n  * `titles` {`any[]`} - \n\n  * `title` {`string`} - \n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "language",
          "description": "`language` {`string`} - \n\nProperty: language"
        },
        {
          "name": "resources",
          "description": "`resources` - \n\nProperty: resources"
        },
        {
          "name": "schema",
          "description": "`schema` - \n\nProperty: schema"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - \n\nProperty: label"
        },
        {
          "name": "value",
          "description": "`value` - \n\nProperty: value"
        },
        {
          "name": "page",
          "description": "`page` {`string`} - \n\nProperty: page"
        },
        {
          "name": "pages",
          "description": "`pages` {`any[]`} - \n\nProperty: pages\n\nDefault: "
        },
        {
          "name": "error",
          "description": "`error` - \n\nProperty: error"
        },
        {
          "name": "is-review",
          "description": "`is-review` {`boolean`} - \n\nProperty: isReview\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "can-submit",
          "description": "`can-submit` {`boolean`} - \n\nProperty: canSubmit",
          "valueSet": "v"
        },
        {
          "name": "has-next",
          "description": "`has-next` {`boolean`} - \n\nProperty: hasNext",
          "valueSet": "v"
        },
        {
          "name": "has-prev",
          "description": "`has-prev` {`boolean`} - \n\nProperty: hasPrev",
          "valueSet": "v"
        },
        {
          "name": "titles",
          "description": "`titles` {`any[]`} - \n\nProperty: titles\n\nDefault: "
        },
        {
          "name": "title",
          "description": "`title` {`string`} - \n\nProperty: title\n\nDefault: "
        },
        {
          "name": "onsubmit",
          "description": "`submit` {`CustomEvent<boolean>`} - "
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}