{
  "version": 1,
  "tags": [
    {
      "name": "grafitto-filter",
      "description": "`grafitto-filter` is a Polymer reusable web component providing a solution for filtering a list of items before displaying them.\nThis component also supports use of custom filter functions using the `f` property. \n\nInstall:\n```bash\nbower install --save grafitto/grafitto-filter\n```\n\n`array`:\n```javascript\nvar array = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"];\n```\n```html\n<grafitto-filter item=[[array]] like=\"o\" as=\"vitu\">\n  <template>\n    <iron-list items=[[vitu]] as=\"item\">\n      <template>\n        <div>{{item}}</div>\n      </template>\n    </iron-list>\n  </template> </grafitto-filter>\n```\n_Note_: When a simple array is provided, the `where` attribute is ignored and filtering done on the array items themselves.\nAlso an array of numbers behave like an array of strings when filtering.\n\n### Arrays of Objects   \n`data`:\n```javascript\nvar data = [\n  {\n    name:\"John\",\n    home: \"Thika\"\n  },\n  {\n    name: \"Doe\",\n    home: \"Nairobi\"\n  }\n]\n```\nExample using `dom-repeat`:\n\n```html\n<grafitto-filter items='[[data]]' where=\"name\" like=\"Doe\" as=\"vitu\">\n  <template>\n    <template is=\"dom-repeat\" items=[[vitu]] as=\"item\">\n      <div>{{item.name}}</div>\n    </template>\n  </template>\n</grafitto-filter>\n```\n\nExample using `iron-list`:\n\n```html\n<grafitto-filter items=[[data]] where=\"name\" like=\"Doe\" as=\"vitu\">\n  <template>\n    <iron-list items=[[vitu]] as=\"item\">\n      <template>\n        <div>{{item.name}}</div>\n      </template>\n    </iron-list>\n  </template>\n</grafitto-filter>\n```\nJust incase you are wondering, `vitu` means `items` in Swahili :-)\n\n_Note_: When a simple array E.g `[\"one\",\"two\",\"three\",\"four\"]` is provided, the `where` attribute is ignored and filtering done on the array items themselves.\n\n`grafitto-filter` also supports complex objects. consider:\n\n\n```javascript\nvar complexObj = [\n  {\n    name: {\n      first: \"Thomas\",\n      second: \"Kimtu\"\n    },\n    home: \"Thika\"\n  },\n  {\n    name: {\n      first: \"John\",\n      second: \"Doe\"\n    },\n    home: \"Othaya\"\n  },\n  {\n    name: {\n      first: \"Clement\",\n      second: \"Wainaina\"\n    },\n    home: \"Nakuru\"\n  }\n]\n``` \n\nHere is an example using the `complexObj` object above\n\n```html\n<grafitto-filter items=[[complexObj]] where=\"name.first\" like=\"tho\" as=\"vitu\">\n  <template>\n    <iron-list items=[[vitu]] as=\"item\">\n      <template>\n        <div>{{item.name.first}} {{item.name.second}}, {{item.home}}</div>\n      </template>\n    </iron-list>\n  </template>\n</grafitto-filter>\n```\n\nYou can also use your custom function to filter the items provided.\nThe function receives a single `item` of the items provided and should return a `boolean` \n\n```html\n<dom-module id=\"your-element\">\n  <template>\n    <grafitto-filter items=[[data]] id=\"filter\" as=\"vitu\">\n      <template>\n        <iron-list items=[[vitu]] as=\"item\">\n          <template>\n            <div>{{item.name}}, {{item.home}}</div>\n          </template>\n        </iron-list>\n      </template>\n    </grafitto-filter>\n    <script>\n      class YourElement extends PolymerElement {\n        static get tag() {\n    return \"your-element\",\n        static get properties() {\n    return {\n          data: {\n            type: Array,\n            value: [\n                    {\n                      \"name\":\"John\",\n                      \"home\": \"Thika\"\n                    },\n                    {\n                      \"name\": \"Doe\",\n                      \"home\": \"Nairobi\"\n                    }\n                  ]\n          }\n        },\n        ready() {\n    super.ready();\n          this.shadowRoot.querySelector('#filter').f = function(item){\n            return item.name == \"Doe\";\n          };\n        }\n       //Then you can call filter() function to trigger filter\n      })\n    </script>\n  </template>\n</dom-module>\n```\n\n### Rule of thumb   \n`like` is taken as a regular expression so remember to escape any characters that you don't want interpreted\nby the regular expression engine.\n\nEvents:\n\n  * `filter` {`CustomEvent<boolean>`} - \n\nAttributes:\n\n  * `items` {`any[]`} - These are the items to be filtered\n\n  * `like` {`string`} - Filter regular expression string\n\n  * `where` {`string`} - The filter-by field of your items array of objects\n\n  * `case-sensitive` {`boolean`} - Enable case sensitivity when filtering\n\n  * `as` {`string`} - How the filtered items will be passed to the light-DOM. Default `items`\n\n  * `filtered` {`any[]`} - Filtered items\n\n  * `f` - Custom filter function, if this is provided then 'where' and 'like' are ignored\n\nProperties:\n\n  * `items` {`any[]`} - These are the items to be filtered\n\n  * `like` {`string`} - Filter regular expression string\n\n  * `where` {`string`} - The filter-by field of your items array of objects\n\n  * `caseSensitive` {`boolean`} - Enable case sensitivity when filtering\n\n  * `as` {`string`} - How the filtered items will be passed to the light-DOM. Default `items`\n\n  * `filtered` {`any[]`} - Filtered items\n\n  * `f` - Custom filter function, if this is provided then 'where' and 'like' are ignored\n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "items",
          "description": "`items` {`any[]`} - These are the items to be filtered\n\nProperty: items\n\nDefault: "
        },
        {
          "name": "like",
          "description": "`like` {`string`} - Filter regular expression string\n\nProperty: like\n\nDefault: "
        },
        {
          "name": "where",
          "description": "`where` {`string`} - The filter-by field of your items array of objects\n\nProperty: where\n\nDefault: name"
        },
        {
          "name": "case-sensitive",
          "description": "`case-sensitive` {`boolean`} - Enable case sensitivity when filtering\n\nProperty: caseSensitive\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "`as` {`string`} - How the filtered items will be passed to the light-DOM. Default `items`\n\nProperty: as\n\nDefault: items"
        },
        {
          "name": "filtered",
          "description": "`filtered` {`any[]`} - Filtered items\n\nProperty: filtered"
        },
        {
          "name": "f",
          "description": "`f` - Custom filter function, if this is provided then 'where' and 'like' are ignored\n\nProperty: f"
        },
        {
          "name": "onfilter",
          "description": "`filter` {`CustomEvent<boolean>`} - "
        }
      ]
    },
    {
      "name": "grafitto-filter",
      "description": "`grafitto-filter` is a Polymer reusable web component providing a solution for filtering a list of items before displaying them.\nThis component also supports use of custom filter functions using the `f` property. \n\nInstall:\n```bash\nbower install --save grafitto/grafitto-filter\n```\n\n`array`:\n```javascript\nvar array = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"];\n```\n```html\n<grafitto-filter item=[[array]] like=\"o\" as=\"vitu\">\n  <template>\n    <iron-list items=[[vitu]] as=\"item\">\n      <template>\n        <div>{{item}}</div>\n      </template>\n    </iron-list>\n  </template> </grafitto-filter>\n```\n_Note_: When a simple array is provided, the `where` attribute is ignored and filtering done on the array items themselves.\nAlso an array of numbers behave like an array of strings when filtering.\n\n### Arrays of Objects   \n`data`:\n```javascript\nvar data = [\n  {\n    name:\"John\",\n    home: \"Thika\"\n  },\n  {\n    name: \"Doe\",\n    home: \"Nairobi\"\n  }\n]\n```\nExample using `dom-repeat`:\n\n```html\n<grafitto-filter items='[[data]]' where=\"name\" like=\"Doe\" as=\"vitu\">\n  <template>\n    <template is=\"dom-repeat\" items=[[vitu]] as=\"item\">\n      <div>{{item.name}}</div>\n    </template>\n  </template>\n</grafitto-filter>\n```\n\nExample using `iron-list`:\n\n```html\n<grafitto-filter items=[[data]] where=\"name\" like=\"Doe\" as=\"vitu\">\n  <template>\n    <iron-list items=[[vitu]] as=\"item\">\n      <template>\n        <div>{{item.name}}</div>\n      </template>\n    </iron-list>\n  </template>\n</grafitto-filter>\n```\nJust incase you are wondering, `vitu` means `items` in Swahili :-)\n\n_Note_: When a simple array E.g `[\"one\",\"two\",\"three\",\"four\"]` is provided, the `where` attribute is ignored and filtering done on the array items themselves.\n\n`grafitto-filter` also supports complex objects. consider:\n\n\n```javascript\nvar complexObj = [\n  {\n    name: {\n      first: \"Thomas\",\n      second: \"Kimtu\"\n    },\n    home: \"Thika\"\n  },\n  {\n    name: {\n      first: \"John\",\n      second: \"Doe\"\n    },\n    home: \"Othaya\"\n  },\n  {\n    name: {\n      first: \"Clement\",\n      second: \"Wainaina\"\n    },\n    home: \"Nakuru\"\n  }\n]\n``` \n\nHere is an example using the `complexObj` object above\n\n```html\n<grafitto-filter items=[[complexObj]] where=\"name.first\" like=\"tho\" as=\"vitu\">\n  <template>\n    <iron-list items=[[vitu]] as=\"item\">\n      <template>\n        <div>{{item.name.first}} {{item.name.second}}, {{item.home}}</div>\n      </template>\n    </iron-list>\n  </template>\n</grafitto-filter>\n```\n\nYou can also use your custom function to filter the items provided.\nThe function receives a single `item` of the items provided and should return a `boolean` \n\n```html\n<dom-module id=\"your-element\">\n  <template>\n    <grafitto-filter items=[[data]] id=\"filter\" as=\"vitu\">\n      <template>\n        <iron-list items=[[vitu]] as=\"item\">\n          <template>\n            <div>{{item.name}}, {{item.home}}</div>\n          </template>\n        </iron-list>\n      </template>\n    </grafitto-filter>\n    <script>\n      class YourElement extends PolymerElement {\n        static get tag() {\n    return \"your-element\",\n        static get properties() {\n    return {\n          data: {\n            type: Array,\n            value: [\n                    {\n                      \"name\":\"John\",\n                      \"home\": \"Thika\"\n                    },\n                    {\n                      \"name\": \"Doe\",\n                      \"home\": \"Nairobi\"\n                    }\n                  ]\n          }\n        },\n        ready() {\n    super.ready();\n          this.shadowRoot.querySelector('#filter').f = function(item){\n            return item.name == \"Doe\";\n          };\n        }\n       //Then you can call filter() function to trigger filter\n      })\n    </script>\n  </template>\n</dom-module>\n```\n\n### Rule of thumb   \n`like` is taken as a regular expression so remember to escape any characters that you don't want interpreted\nby the regular expression engine.\n\nEvents:\n\n  * `filter` {`CustomEvent<boolean>`} - \n\nAttributes:\n\n  * `items` {`any[]`} - These are the items to be filtered\n\n  * `like` {`string`} - Filter regular expression string\n\n  * `where` {`string`} - The filter-by field of your items array of objects\n\n  * `case-sensitive` {`boolean`} - Enable case sensitivity when filtering\n\n  * `as` {`string`} - How the filtered items will be passed to the light-DOM. Default `items`\n\n  * `filtered` {`any[]`} - Filtered items\n\n  * `f` - Custom filter function, if this is provided then 'where' and 'like' are ignored\n\nProperties:\n\n  * `items` {`any[]`} - These are the items to be filtered\n\n  * `like` {`string`} - Filter regular expression string\n\n  * `where` {`string`} - The filter-by field of your items array of objects\n\n  * `caseSensitive` {`boolean`} - Enable case sensitivity when filtering\n\n  * `as` {`string`} - How the filtered items will be passed to the light-DOM. Default `items`\n\n  * `filtered` {`any[]`} - Filtered items\n\n  * `f` - Custom filter function, if this is provided then 'where' and 'like' are ignored\n\n  * `_template` {`HTMLTemplateElement | null`} - \n\n  * `_importPath` {`string`} - \n\n  * `rootPath` {`string`} - \n\n  * `importPath` {`string`} - \n\n  * `root` {`HTMLElement | ShadowRoot | StampedTemplate | null`} - \n\n  * `$` - \n\n  * `_overrideLegacyUndefined` {`boolean`} - \n\n  * `PROPERTY_EFFECT_TYPES` - ",
      "attributes": [
        {
          "name": "items",
          "description": "`items` {`any[]`} - These are the items to be filtered\n\nProperty: items\n\nDefault: "
        },
        {
          "name": "like",
          "description": "`like` {`string`} - Filter regular expression string\n\nProperty: like\n\nDefault: "
        },
        {
          "name": "where",
          "description": "`where` {`string`} - The filter-by field of your items array of objects\n\nProperty: where\n\nDefault: name"
        },
        {
          "name": "case-sensitive",
          "description": "`case-sensitive` {`boolean`} - Enable case sensitivity when filtering\n\nProperty: caseSensitive\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "as",
          "description": "`as` {`string`} - How the filtered items will be passed to the light-DOM. Default `items`\n\nProperty: as\n\nDefault: items"
        },
        {
          "name": "filtered",
          "description": "`filtered` {`any[]`} - Filtered items\n\nProperty: filtered"
        },
        {
          "name": "f",
          "description": "`f` - Custom filter function, if this is provided then 'where' and 'like' are ignored\n\nProperty: f"
        },
        {
          "name": "onfilter",
          "description": "`filter` {`CustomEvent<boolean>`} - "
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}